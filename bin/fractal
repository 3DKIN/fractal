#! /usr/bin/env node --harmony

'use strict';

const Path           = require('path');
const semver         = require('semver');
const Liftoff        = require('liftoff');
const chalk          = require('chalk');
const updateNofifier = require('update-notifier');
const cliPackage     = require('../package.json');

const notifier = updateNofifier({
    pkg: cliPackage
});

const Fractal = new Liftoff({
    processTitle: 'fractal',
    moduleName: '@frctl/fractal',
    configName: 'fractal',
    extensions: {
        '.js': null
    },
    v8flags: ['--harmony']
});

Fractal.launch({}, function(env){

    let app;
    let scope = 'global';
    let configPath = env.configPath;

    if (configPath) {
        require(configPath);
        scope = 'project';
    } else {
        try {
            const projectPackage = require(Path.join(env.cwd, 'package.json'));
            if (projectPackage.fractal && projectPackage.fractal.main) {
                configPath = Path.join(env.cwd, projectPackage.fractal.main);
                require(configPath);
                scope = 'project';
            }
        } catch(e) {
            if (e.code && e.code === 'MODULE_NOT_FOUND') {
                // no config file found, must be global context.
                configPath = null;
            } else {
                throw e;
            }
        }
    }
    
    if (env.modulePath) {
        app = require(env.modulePath);
        if (!semver.satisfies(env.modulePackage.version, `^${cliPackage.version}`)) {
            // Project is using a legacy version of Fractal
            console.log(`Fractal version mismatch! Global: ${cliPackage.version} / Local: ${env.modulePackage.version}`);
            app.run();
            return;
        }

        if (semver.gt(cliPackage.version, env.modulePackage.version)) {
            app.cli.notify.versionMismatch({
                cli: cliPackage.version,
                local: env.modulePackage.version
            });
        }
    } else {
        app = require('../.');
    }

    if (notifier.update) {
        process.on('exit', function () {
            app.cli.notify.updateAvailable(notifier.update);
    	});
    }

    app.cli.setConfigPath(configPath);
    app.cli.setScope(scope);
    app.cli.exec();
});
