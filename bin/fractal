#!/usr/bin/env node

const local = require('../.');
const Liftoff = require('liftoff');
const logger = require('@frctl/console');
const semver = require('semver');
const yargs = require('yargs');
const yargonaut = require('yargonaut').style('cyan').errorsStyle('red.bold');

const cli = new Liftoff({
  name: 'fractal',
  processTitle: 'fractal',
  moduleName: '@frctl/fractal',
  configName: 'fractal.config',
  extensions: {
    '.js': null,
    '.json': null
  }
});

cli.launch({}, function(env){

  /**
   * Get or create Fractal instance
   */

  let app;
  const config = env.configPath ? require(env.configPath) : {
    scope: 'global'
  };

  if (config instanceof local.Fractal || (config.constructor && config.constructor.name === 'Fractal')) {
    app = config;
  } else {
    const frctl = env.modulePath ? require(env.modulePath) : local;
    app = frctl(config);
  }

  if (semver.major(app.version) < 2) {
    app.cli.exec();
    return;
  }

  /**
   * Configure args parser/handler
   */

  yargs.usage(logger.format(`\n$0 <command> [...]`, 'yellow.bold'))
    .showHelpOnFail(true)
    .help('h').alias('h', 'help')
    .fail(function (msg, err, yargs) {
      if (err) {
        throw err;
      }
      logger.error(msg);
      logger.draw.br();
      logger.log(yargs.help());
      logger.draw.br();
      process.exit(1);
    })
    .version(app.VERSION);

  /**
   * Load bundled commands
   */

  for (const command of app.getCommands()) {
    yargs.command(command);
  }

  /**
   * Parse argv, run appropriate command
   */

  return yargs.argv;

});
